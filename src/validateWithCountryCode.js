import normalize from './normalize.js'
import validate from './validate.js'

export default function validateWithCountryCode (countryCode, phone) {
  const phoneRegexMap = new Map([
    // USA
    ['+1', /^(\+1)?[\s\-.]?\(?\d{3}\)?[\s\-.]?\d{3}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // UK
    ['+44', /^(\+44)?[\s\-.]?\(?\d{2,4}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4,6}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // India
    ['+91', /^(\+91)?[\s\-.]?\d{10}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Australia
    ['+61', /^(\+61)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Japan
    ['+81', /^(\+81)?[\s\-.]?\(?\d{1,4}\)?[\s\-.]?\d{1,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Germany
    ['+49', /^(\+49)?[\s\-.]?\(?\d{2,5}\)?[\s\-.]?\d{2,4}[\s\-.]?\d{4,8}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // France
    ['+33', /^(\+33)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{2,4}[\s\-.]?\d{4,6}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Brazil
    ['+55', /^(\+55)?[\s\-.]?\(?\d{2}\)?[\s\-.]?\d{4,5}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // South Africa
    ['+27', /^(\+27)?[\s\-.]?\(?\d{2}\)?[\s\-.]?\d{3}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // China
    ['+86', /^(\+86)?[\s\-.]?\(?\d{2,3}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Italy
    ['+39', /^(\+39)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{2,4}[\s\-.]?\d{4,6}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Canada
    ['+1', /^(\+1)?[\s\-.]?\(?\d{3}\)?[\s\-.]?\d{3}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Mexico
    ['+52', /^(\+52)?[\s\-.]?\(?\d{2,3}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Russia
    ['+7', /^(\+7)?[\s\-.]?\(?\d{3,4}\)?[\s\-.]?\d{2,4}[\s\-.]?\d{4,6}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // South Korea
    ['+82', /^(\+82)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Spain
    ['+34', /^(\+34)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Netherlands
    ['+31', /^(\+31)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Sweden
    ['+46', /^(\+46)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Switzerland
    ['+41', /^(\+41)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // New Zealand
    ['+64', /^(\+64)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // UAE
    ['+971', /^(\+971)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Egypt
    ['+20', /^(\+20)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Nigeria
    ['+234', /^(\+234)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Kenya
    ['+254', /^(\+254)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Ghana
    ['+233', /^(\+233)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Argentina
    ['+54', /^(\+54)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Chile
    ['+56', /^(\+56)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Colombia
    ['+57', /^(\+57)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Peru
    ['+51', /^(\+51)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i],
    // Venezuela
    ['+58', /^(\+58)?[\s\-.]?\(?\d{1,2}\)?[\s\-.]?\d{3,4}[\s\-.]?\d{4}(?:[\s\-.]?(?:x|ext)?\d{1,5})?$/i]
  ])

  // If the country code is not in the map, just validate the phone number
  // Using our generic validate function
  if (!phoneRegexMap.has(countryCode)) {
    return validate(phone)
  }

  const normPhone = normalize(String(phone))
  const regex = phoneRegexMap.get(countryCode)

  if (normPhone.startsWith(countryCode)) {
    return regex.test(normPhone)
  }

  return false
}
